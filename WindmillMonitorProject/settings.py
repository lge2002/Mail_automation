"""
Django settings for WindmillMonitorProject project.

Generated by 'django-admin startproject' using Django 5.2.1.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
import os

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-k$#5zq%z^hivrdz31vkwv1ag(ruafk#7ue-tr_ay3l(-_-5zk('

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'data_importer_web',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'WindmillMonitorProject.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')], # Add this line to find project-wide templates (optional, but good practice)
        'APP_DIRS': True, # This tells Django to look for 'templates' folders inside each installed app
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'WindmillMonitorProject.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases


DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': 'excel',
        'USER': 'root',
        'PASSWORD': 'qwerty@123',
        'HOST': 'localhost',
        'PORT': '3309',
        'OPTIONS': {
            'init_command': "SET sql_mode='STRICT_TRANS_TABLES'",
        }
    }
}

# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True

TIME_ZONE = 'Asia/Kolkata'

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'



# WindmillMonitorProject/settings.py

# Email IMAP Configuration for automated import
# IMPORTANT: For Gmail, use an App Password if you have 2FA enabled.
# Do NOT use your regular email password directly for security reasons.
# App Passwords: https://support.google.com/accounts/answer/185833?hl=en

EMAIL_IMAP_HOST = 'imap.gmail.com'
EMAIL_IMAP_PORT = 993
EMAIL_IMAP_USER = 'leapge2025@gmail.com'
EMAIL_IMAP_PASSWORD = 'amft vfas mzxv uhek' # Your generated app password
EMAIL_IMAP_LABEL = 'TRAIL' # The Gmail label (folder) to monitor for emails



# WindmillMonitorProject/settings.py

# ... (your existing settings above this, including EMAIL_IMAP_HOST, etc.) ...


import os

# Define the path to your custom handler
# Replace 'yourapp' with the actual name of your Django app where logging_handlers.py resides
LOGGING_HANDLER_PATH = 'data_importer_web.logging_handlers.DatabaseHandler'

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False, # Keep Django's default loggers

    'formatters': {
        'verbose': {
            'format': '{levelname} {asctime} {module} {process:d} {thread:d} {message}',
            'style': '{',
        },
        'simple': {
            'format': '{levelname} {message}',
            'style': '{',
        },
        'standard': { # Formatter for the database handler
            'format': '%(asctime)s - %(levelname)s - %(name)s - %(pathname)s:%(lineno)d - %(message)s'
        },
    },

    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
            'formatter': 'standard', # Or 'simple'
        },
        'file': {
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': os.path.join(os.path.dirname(os.path.abspath(__file__)), 'logs', 'django.log'),
            'maxBytes': 1024*1024*5, # 5 MB
            'backupCount': 5,
            'formatter': 'standard',
        },
        'database': { # Your custom database handler
            'class': LOGGING_HANDLER_PATH,
            'formatter': 'standard', # Use the standard formatter to include all details
            'level': 'INFO', # Set the minimum level to store in DB (e.g., INFO, WARNING, ERROR)
        },
    },

    'loggers': {
        'django': { # Default Django logger
            'handlers': ['console', 'file'], # Send Django's logs to console and file
            'level': 'INFO',
            'propagate': False,
        },
        'django.request': { # Log for requests
            'handlers': ['console', 'file'],
            'level': 'INFO',
            'propagate': False,
        },
        'your_app_name': { # Logger for your specific application
            'handlers': ['console', 'file', 'database'], # Send your app's logs to console, file, AND DB
            'level': 'INFO', # Set your desired logging level
            'propagate': True, # Allow logs to propagate up to root logger if needed
        },
        '': { # Root logger - This catches anything not handled by specific loggers
            'handlers': ['console', 'file', 'database'], # Ensure your custom logs are caught here
            'level': 'INFO',
        },
    },
}

# Create 'logs' directory if it doesn't exist for the file handler
LOGS_DIR = os.path.join(os.path.dirname(os.path.abspath(__file__)), 'logs')
if not os.path.exists(LOGS_DIR):
    os.makedirs(LOGS_DIR)